{"version":3,"sources":["constants.ts","Section.tsx","SectionsList.tsx","Course.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["weirdCourseNames","statusMap","WaitList","getStatusColor","status","Section","recitations","instructor","meetings","meetingDateTimes","meetingDays","meetingTimes","forEach","m","dateTime","moment","utc","beginDate","push","format","endTime","clone","add","duration","css","display","flexDirection","width","justifyContent","padding","color","getStatusName","join","map","time","paddingLeft","backgroundColor","r","SectionsList","sections","type","styles","Course","fontSize","row","transition","id","alignItems","name","deptCourseId","useState","showSections","setShowSections","key","onClick","App","courses","setCourses","loading","setLoading","useEffect","a","async","fetch","res","json","payload","console","log","className","sort","b","parseInt","course","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3263ed9a.chunk.js","sourcesContent":["export const weirdCourseNames: { [s: string]: string } = {\n  \"Intro to Computer SCI\": \"Intro to Computer Science\",\n  \"Computer Systems Org\": \"Computer Systems Organization\",\n  \"Topics of General Interest:\":\n    \"Topics of General Interest: Drawing on the Web\",\n  \"Spec Tpcs in Prog Lang:\": \"Special Topics in Programming Languages\"\n};\n\nexport const statusMap: { [s: string]: string } = {\n  WaitList: \"Wait List\"\n};\n\n/*\nexport const sectionTypes: { [s: string]: string } = {\n  LEC: \"Lecture\",\n  RCT: \"Recitation\"\n};\n*/\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { statusMap } from \"./constants\";\nimport { IMeeting, ISection } from \"./App\";\n\ninterface Props {\n  type: string;\n  instructor: string;\n  status: string;\n  meetings: Array<IMeeting>;\n  recitations: null | Array<ISection>;\n}\n\nfunction getStatusColor(status: string): string {\n  switch (status) {\n    case \"WaitList\":\n      return \"orange\";\n    case \"Open\":\n      return \"green\";\n    case \"Closed\":\n      return \"red\";\n    default:\n      return \"black\";\n  }\n}\n\nfunction getStatusName(status: string): string {\n  if (status in statusMap) {\n    return statusMap[status];\n  }\n  return status;\n}\n\nconst Section: React.FC<Props> = ({\n  recitations,\n  instructor,\n  status,\n  meetings\n}) => {\n  const meetingDateTimes = [];\n  const meetingDays: string[] = [];\n  const meetingTimes: string[] = [];\n  meetings.forEach(m => {\n    const dateTime = moment.utc(m.beginDate);\n    meetingDateTimes.push(dateTime);\n    meetingDays.push(dateTime.format(\"ddd\"));\n    const endTime = dateTime.clone().add(m.duration, \"minutes\");\n    meetingTimes.push(\n      `${dateTime.format(\"h:mm A\")}-${endTime.format(\"h:mm A\")}`\n    );\n  });\n  return (\n    <div css={{ display: \"flex\", flexDirection: \"column\" }}>\n      <div\n        css={{\n          display: \"flex\",\n          width: \"80vw\",\n          justifyContent: \"space-evenly\",\n          padding: \"10px\"\n        }}\n      >\n        <div css={{ color: getStatusColor(status), width: \"10%\" }}>\n          {getStatusName(status)}{\" \"}\n        </div>\n        <div css={{ width: \"25%\" }}>{instructor} </div>\n        <div css={{ width: \"10%\" }}> {meetingDays.join(\"\\t\")} </div>\n        <div css={{ width: \"40%\", display: \"flex\", flexDirection: \"column\" }}>\n          {meetingTimes.map(time => (\n            <div> {time} </div>\n          ))}\n        </div>\n      </div>\n      {recitations && (\n        <ul\n          css={{\n            paddingLeft: \"40px\",\n            backgroundColor: \"#d9d9d9\",\n            width: \"60vw\"\n          }}\n        >\n          {recitations.map(r => (\n            <Section {...r} />\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Section;\n","import React from \"react\";\nimport Section from \"./Section\";\nimport { ISection } from \"./App\";\n\ninterface Props {\n  sections: Array<ISection>;\n}\n\nconst SectionsList: React.FC<Props> = ({ sections }) => {\n  return (\n    <ul>\n      {sections.map(({ type, instructor, status, meetings, recitations }) => (\n        <Section\n          type={type}\n          instructor={instructor}\n          status={status}\n          meetings={meetings}\n          recitations={recitations}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default SectionsList;\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\n\nimport React, { useState } from \"react\";\nimport { weirdCourseNames } from \"./constants\";\nimport { ISection } from \"./App\";\nimport SectionsList from \"./SectionsList\";\n\ninterface Props {\n  name: string;\n  deptCourseId: string;\n  sections: Array<ISection>;\n}\n\nconst styles = {\n  Course: {\n    fontSize: \"1.2rem\",\n    display: \"flex\",\n    flexDirection: \"column\" as \"column\"\n  },\n  row: {\n    display: \"flex\",\n    padding: \"10px\",\n    width: \"80vw\",\n    transition: \"0.1s background-color\",\n    \"&:hover\": {\n      backgroundColor: \"#b9b9b9\"\n    }\n  },\n  id: {\n    width: \"10%\",\n    display: \"flex\",\n    flexDirection: \"column\" as \"column\",\n    alignItems: \"center\"\n  },\n  name: {\n    width: \"70%\"\n  }\n};\n\nconst Course: React.FC<Props> = ({ name, deptCourseId, sections }) => {\n  const [showSections, setShowSections] = useState(false);\n  return (\n    <div key={name} css={styles.Course}>\n      <div css={styles.row} onClick={() => setShowSections(!showSections)}>\n        <div css={styles.id}>{deptCourseId}</div>\n        <div css={styles.name}>\n          {name in weirdCourseNames ? weirdCourseNames[name] : name}\n        </div>\n      </div>\n      {showSections && <SectionsList sections={sections} />}\n    </div>\n  );\n};\n\nexport default Course;\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Course from \"./Course\";\n\nexport interface ISection {\n  registrationNumber: number;\n  sectionCode: string;\n  instructor: string;\n  type: string;\n  status: string;\n  meetings: Array<IMeeting>;\n  recitations: Array<ISection> | null;\n}\n\nexport interface IMeeting {\n  beginDate: Date;\n  duration: number;\n  endDate: Date;\n}\n\ninterface ICourse {\n  name: string;\n  deptCourseId: string;\n  sections: Array<ISection>;\n}\n\nconst styles = {\n  App: {\n    display: \"flex\",\n    flexDirection: \"column\" as \"column\",\n    padding: \"20px\"\n  }\n};\n\nconst App: React.FC = () => {\n  const [courses, setCourses] = useState<Array<ICourse>>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(\"https://albertsucks.com/2020/sp/ua/csci\");\n        const payload = await res.json();\n        setCourses(payload);\n        setLoading(false);\n      } catch (err) {\n        console.log(\"ERROR\");\n        console.log(err);\n      }\n    })();\n  }, []);\n  if (loading) {\n    return (\n      <div css={styles.App}>\n        <header className=\"App-header\">\n          <h1> Courses </h1>\n        </header>\n        <div>Loading...</div>\n      </div>\n    );\n  }\n  return (\n    <div css={styles.App}>\n      <header className=\"App-header\">\n        <h1> Courses </h1>\n      </header>\n      <div>\n        {courses\n          .sort((a, b) => parseInt(a.deptCourseId) - parseInt(b.deptCourseId))\n          .map((course: ICourse) => (\n            <Course\n              name={course.name}\n              deptCourseId={course.deptCourseId}\n              sections={course.sections}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}